local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local UserInputService = game:GetService('UserInputService')
local ReplicatedStorage = game:GetService('ReplicatedStorage')

local repo =
    'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager =
    loadstring(
        game:HttpGet(repo .. 'addons/ThemeManager.lua')
    )()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
ThemeManager:SaveDefault('Tokyo Night')

local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Config = {
    HitPart = 'Head',
    TeamCheck = true,
    Distance = 7,
    FreezeTolerance = 0.1,
    FOVColor = Color3.fromRGB(255, 255, 255),
    FOVRadius = 100,
    Smoothing = 10,
    RapidFireAmount = 1000,
    PredictionFactor = 0.5,
    SpinbotSpeed = 50,
}
local BulletTPEnabled = false
local AimbotEnabled = false
local PredictionEnabled = false
local FOVEnabled = false
local RapidFireEnabled = false
local SenseEnabled = false
local SpinbotEnabled = false
local KillAllEnabled = false
local SessionID = string.gsub(tostring(math.random()):sub(3), '%d', function(c)
    return string.char(96 + math.random(1, 26))
end)
local LastPositions = {}
local LastTeleportedPlayer = nil
local LastTeleportedPlayerOriginalPos = nil
local FOVCircle = nil
local AimbotTarget = nil
local IsRightClickHeld = false
local Sense = nil
local TeleportLog = {}

local Cheat = {
    Modules = {
        GunUtils = require(ReplicatedStorage.Library.GunUtils),
    },
    CachedFunctions = {},
}
table.insert(Cheat.CachedFunctions, Cheat.Modules.GunUtils.ComputeFireRateRPM)

Cheat.Modules.GunUtils.ComputeFireRateRPM = function(...)
    if not RapidFireEnabled then
        return Cheat.CachedFunctions[1](...)
    end
    return Config.RapidFireAmount
end

local function SafeExecute(func)
    local success, errorMessage = pcall(func)
    if not success then
    end
end

local function SetPlayerTransparency(player, transparency)
    if player and player.Character then
        for _, part in ipairs(player.Character:GetDescendants()) do
            if part:IsA('BasePart') then
                part.Transparency = transparency
                part.CanCollide = (transparency == 0)
                part.LocalTransparencyModifier = transparency
            elseif part:IsA('Decal') then
                part.Transparency = transparency
            end
        end
        local tool = player.Character:FindFirstChildOfClass('Tool')
        if tool then
            for _, part in ipairs(tool:GetDescendants()) do
                if part:IsA('BasePart') then
                    part.Transparency = transparency
                    part.LocalTransparencyModifier = transparency
                elseif part:IsA('Decal') then
                    part.Transparency = transparency
                end
            end
        end
    end
end

local function RemoveAdornments()
    SafeExecute(function()
        for _, obj in ipairs(Workspace:GetDescendants()) do
            if
                obj:IsA('SelectionBox')
                or obj:IsA('BoxHandleAdornment')
                or obj:IsA('BillboardGui')
                or obj:IsA('SurfaceGui')
            then
                obj:Destroy()
            end
        end
        if LastTeleportedPlayer and LastTeleportedPlayer.Character then
            for _, obj in ipairs(LastTeleportedPlayer.Character:GetDescendants()) do
                if obj:IsA('SelectionBox') or obj:IsA('BoxHandleAdornment') then
                    obj:Destroy()
                end
            end
        end
    end)
end

local function ClearPlayerESP(player)
    if Sense and SenseEnabled and Sense.espCache[player] then
        Sense.espCache[player].box.Visible = false
        if Sense.espCache[player].name then
            Sense.espCache[player].name.Visible = false
        end
        if Sense.espCache[player].distance then
            Sense.espCache[player].distance.Visible = false
        end
        Sense.espCache[player] = nil
    end
end

local function FindPlayerInFOV()
    if
        not LocalPlayer.Character
        or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    then
        return nil
    end

    local centerPos = UserInputService:GetMouseLocation()
    local team = LocalPlayer.Team
    local closestPlayer = nil
    local closestDistance = Config.FOVRadius

    for _, player in ipairs(Players:GetPlayers()) do
        SafeExecute(function()
            if
                player == LocalPlayer
                or not player.Character
                or not player.Character:FindFirstChild('HumanoidRootPart')
            then
                return
            end
            if
                (Config.TeamCheck and team and player.Team == team)
                or player.Character:FindFirstChild('ForceField')
            then
                return
            end

            local hitPart = player.Character:FindFirstChild(Config.HitPart)
                or player.Character.HumanoidRootPart
            local screenPos, onScreen = Camera:WorldToViewportPoint(
                hitPart.Position
            )
            if onScreen then
                local distance = (
                    Vector2.new(screenPos.X, screenPos.Y) - centerPos
                ).Magnitude
                if distance <= closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end)
    end

    return closestPlayer
end

local function TeleportPlayerInFOV()
    if
        not BulletTPEnabled
        or not LocalPlayer.Character
        or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    then
        if
            LastTeleportedPlayer
            and LastTeleportedPlayer.Character
            and LastTeleportedPlayer.Character:FindFirstChild(
                'HumanoidRootPart'
            )
        then
            local hitPart = LastTeleportedPlayer.Character:FindFirstChild(
                Config.HitPart
            ) or LastTeleportedPlayer.Character.HumanoidRootPart
            hitPart.Anchored = false
            hitPart.CanCollide = true
            if LastTeleportedPlayerOriginalPos then
                hitPart.CFrame = CFrame.new(LastTeleportedPlayerOriginalPos)
            end
            LastPositions[hitPart] = nil
            SetPlayerTransparency(LastTeleportedPlayer, 0)
            RemoveAdornments()
            if Sense and SenseEnabled then
                Sense.UpdateESPPosition(LastTeleportedPlayer, nil)
            end
            LastTeleportedPlayer = nil
            LastTeleportedPlayerOriginalPos = nil
        end
        return
    end

    local targetCFrame = Camera.CFrame * CFrame.new(0, 0, -Config.Distance)
    local targetPlayer = FindPlayerInFOV()

    if
        LastTeleportedPlayer
        and LastTeleportedPlayer.Character
        and LastTeleportedPlayerOriginalPos
    then
        local hitPart = LastTeleportedPlayer.Character:FindFirstChild(
            Config.HitPart
        ) or LastTeleportedPlayer.Character.HumanoidRootPart
        local screenPos, onScreen = Camera:WorldToViewportPoint(
            hitPart.Position
        )
        if
            not onScreen
            or (
                    Vector2.new(screenPos.X, screenPos.Y)
                    - UserInputService:GetMouseLocation()
                ).Magnitude
                > Config.FOVRadius
        then
            SafeExecute(function()
                hitPart.Anchored = false
                hitPart.CanCollide = true
                hitPart.CFrame = CFrame.new(LastTeleportedPlayerOriginalPos)
                LastPositions[hitPart] = nil
                SetPlayerTransparency(LastTeleportedPlayer, 0)
                RemoveAdornments()
                if Sense and SenseEnabled then
                    Sense.UpdateESPPosition(LastTeleportedPlayer, nil)
                end
                LastTeleportedPlayer = nil
                LastTeleportedPlayerOriginalPos = nil
            end)
        end
    end

    if
        targetPlayer
        and targetPlayer.Character
        and targetPlayer.Character:FindFirstChild('HumanoidRootPart')
    then
        SafeExecute(function()
            local hitPart = targetPlayer.Character:FindFirstChild(
                Config.HitPart
            ) or targetPlayer.Character.HumanoidRootPart
            local currentPos = hitPart.Position

            if targetPlayer ~= LastTeleportedPlayer then
                LastTeleportedPlayerOriginalPos = currentPos
                local screenPos, onScreen = Camera:WorldToViewportPoint(
                    currentPos
                )
                if onScreen then
                    table.insert(TeleportLog, {
                        Player = targetPlayer.Name,
                        Position = LastTeleportedPlayerOriginalPos,
                        Timestamp = os.time(),
                    })
                else
                    return
                end
            end

            local lastPos = LastPositions[hitPart]
            if
                lastPos
                and (lastPos - targetCFrame.Position).Magnitude
                    < Config.FreezeTolerance
            then
                return
            end

            if hitPart:CanSetNetworkOwnership() then
                hitPart:SetNetworkOwner(LocalPlayer)
            end
            hitPart.CanCollide = false
            hitPart.Massless = true
            hitPart.Anchored = true
            hitPart.CFrame = targetCFrame
            LastPositions[hitPart] = targetCFrame.Position
            LastTeleportedPlayer = targetPlayer
            SetPlayerTransparency(targetPlayer, 1)
            RemoveAdornments()
            if Sense and SenseEnabled then
                Sense.UpdateESPPosition(
                    targetPlayer,
                    LastTeleportedPlayerOriginalPos
                )
            end
        end)
    end
end

local function UpdateAimbot()
    if
        not AimbotEnabled
        or not IsRightClickHeld
        or not LocalPlayer.Character
        or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    then
        AimbotTarget = nil
        return
    end

    AimbotTarget = FindPlayerInFOV()
    if
        AimbotTarget
        and AimbotTarget.Character
        and AimbotTarget.Character:FindFirstChild('Head')
    then
        local headPos = AimbotTarget.Character.Head.Position
        if
            PredictionEnabled
            and AimbotTarget.Character:FindFirstChild('HumanoidRootPart')
        then
            local targetRoot = AimbotTarget.Character.HumanoidRootPart
            local velocity = targetRoot.Velocity
            local distance = (Camera.CFrame.Position - headPos).Magnitude
            local travelTime = distance / 100
            local predictionOffset = velocity
                * travelTime
                * Config.PredictionFactor
            predictionOffset = predictionOffset.Unit
                * math.min(predictionOffset.Magnitude, 10)
            predictionOffset = predictionOffset + Vector3.new(0, 7, 0)
            headPos = headPos + predictionOffset
        end
        local lookAtCFrame = CFrame.new(Camera.CFrame.Position, headPos)
        local smoothingFactor = 1 - (Config.Smoothing / 20)
        Camera.CFrame = Camera.CFrame:Lerp(lookAtCFrame, smoothingFactor)
    end
end

local function CreateFOVCircle()
    local circle = Drawing.new('Circle')
    circle.Thickness = 2
    circle.Color = Config.FOVColor
    circle.Filled = false
    circle.Transparency = 1
    circle.Visible = false
    circle.ZIndex = 1
    circle.Radius = Config.FOVRadius
    circle.Position = UserInputService:GetMouseLocation()
    return circle
end

local function UpdateFOVCircle()
    if not FOVCircle then
        FOVCircle = CreateFOVCircle()
    end

    FOVCircle.Position = UserInputService:GetMouseLocation()
    FOVCircle.Radius = Config.FOVRadius
    FOVCircle.Visible = FOVEnabled
end

local function UpdateSpinbot()
    if
        SpinbotEnabled
        and LocalPlayer.Character
        and LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
    then
        local rootPart = LocalPlayer.Character.HumanoidRootPart
        local spinSpeed = Config.SpinbotSpeed
        local newCFrame = rootPart.CFrame
            * CFrame.Angles(0, math.rad(spinSpeed), 0)
        rootPart.CFrame = newCFrame
    end
end

local function TeleportEntities(cframe, team)
    if not cframe then return end

    -- Calculate spawn position 10 studs in front of the player
    local spawnPosition = cframe * CFrame.new(0, 0, -10) -- Reduced distance for visibility

    -- Handle NPCs in Workspace.__THINGS.__ENTITIES
    local entitiesFolder = Workspace:FindFirstChild('__THINGS') and Workspace.__THINGS:FindFirstChild('__ENTITIES')
    if entitiesFolder then
        for _, entity in ipairs(entitiesFolder:GetChildren()) do
            SafeExecute(function()
                if entity:FindFirstChild('HumanoidRootPart') then
                    local humanoidRootPart = entity.HumanoidRootPart
                    -- Set network ownership to local player if possible
                    if humanoidRootPart:CanSetNetworkOwnership() then
                        humanoidRootPart:SetNetworkOwner(LocalPlayer)
                    end
                    humanoidRootPart.CanCollide = false
                    humanoidRootPart.Anchored = true
                    humanoidRootPart.CFrame = spawnPosition
                    local humanoid = entity:FindFirstChild('Humanoid')
                    if humanoid then
                        humanoid.WalkSpeed = 0
                        humanoid.JumpPower = 0
                    end
                elseif entity:FindFirstChild('Hitbox') then
                    local directory = entity:GetAttribute('Directory')
                    if not (directory == 'White' and entity:GetAttribute('OwnerUID') == LocalPlayer.UserId) then
                        local hitbox = entity.Hitbox
                        if hitbox:CanSetNetworkOwnership() then
                            hitbox:SetNetworkOwner(LocalPlayer)
                        end
                        hitbox.CanCollide = false
                        hitbox.Anchored = true
                        hitbox.CFrame = spawnPosition
                    end
                end
            end)
        end
    end

    -- Handle other players
    for _, player in ipairs(Players:GetPlayers()) do
        SafeExecute(function()
            if
                player ~= LocalPlayer
                and player.Character
                and player.Character:FindFirstChild('HumanoidRootPart')
                and player.Character:FindFirstChild('Humanoid')
            then
                if not (Config.TeamCheck and team and player.Team == team) then
                    if not player.Character:FindFirstChild('ForceField') then
                        local humanoidRootPart = player.Character.HumanoidRootPart
                        if humanoidRootPart:CanSetNetworkOwnership() then
                            humanoidRootPart:SetNetworkOwner(LocalPlayer)
                        end
                        humanoidRootPart.CanCollide = false
                        humanoidRootPart.Anchored = true
                        humanoidRootPart.CFrame = spawnPosition
                        local humanoid = player.Character.Humanoid
                        humanoid.WalkSpeed = 0
                        humanoid.JumpPower = 0
                    end
                end
            end
        end)
    end
end

local function RestoreEntities()
    SafeExecute(function()
        local entitiesFolder = Workspace:FindFirstChild('__THINGS')
            and Workspace.__THINGS:FindFirstChild('__ENTITIES')
        if entitiesFolder then
            for _, entity in ipairs(entitiesFolder:GetChildren()) do
                if entity:FindFirstChild('HumanoidRootPart') then
                    entity.HumanoidRootPart.Anchored = false
                    entity.HumanoidRootPart.CanCollide = true
                    local humanoid = entity:FindFirstChild('Humanoid')
                    if humanoid then
                        humanoid.WalkSpeed = 16
                        humanoid.JumpPower = 50
                    end
                elseif entity:FindFirstChild('Hitbox') then
                    entity.Hitbox.Anchored = false
                    entity.Hitbox.CanCollide = true
                end
            end
        end
        for _, player in ipairs(Players:GetPlayers()) do
            if
                player ~= LocalPlayer
                and player.Character
                and player.Character:FindFirstChild('HumanoidRootPart')
                and player.Character:FindFirstChild('Humanoid')
            then
                player.Character.HumanoidRootPart.Anchored = false
                player.Character.HumanoidRootPart.CanCollide = true
                player.Character.Humanoid.WalkSpeed = 16
                player.Character.Humanoid.JumpPower = 50
            end
        end
    end)
end

local function UpdateKillAll()
    SafeExecute(function()
        if
            not KillAllEnabled
            or not LocalPlayer.Character
            or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart')
        then
            RestoreEntities()
            return
        end

        local cframe = LocalPlayer.Character.HumanoidRootPart.CFrame
        local team = LocalPlayer.Team
        TeleportEntities(cframe, team)
    end)
end

Players.PlayerRemoving:Connect(function(player)
    SafeExecute(function()
        if LastTeleportedPlayer == player then
            LastTeleportedPlayer = nil
            LastTeleportedPlayerOriginalPos = nil
        end
        ClearPlayerESP(player)
    end)
end)

Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function(character)
        character.AncestryChanged:Connect(function()
            if not character:IsDescendantOf(Workspace) then
                SafeExecute(function()
                    ClearPlayerESP(player)
                end)
            end
        end)
    end)
end)

UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        IsRightClickHeld = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gameProcessed)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then
        IsRightClickHeld = false
        AimbotTarget = nil
    end
end)

local Window = Library:CreateWindow({
    Title = 'Big Paintball 2 X',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2,
})

local Tabs = {
    Aimbot = Window:AddTab('Aimbot'),
    ESP = Window:AddTab('ESP'),
    Exploits = Window:AddTab('Exploits'),
    Settings = Window:AddTab('UI Settings'),
}

local AimbotGroup = Tabs.Aimbot:AddLeftGroupbox('Aimbot Controls')

AimbotGroup:AddToggle('AimbotToggle', {
    Text = 'Enable Aimbot',
    Default = false,
    Callback = function(Value)
        AimbotEnabled = Value
        if not AimbotEnabled then
            AimbotTarget = nil
        end
    end,
})

AimbotGroup:AddToggle('PredictionToggle', {
    Text = 'Enable Prediction',
    Default = false,
    Callback = function(Value)
        PredictionEnabled = Value
    end,
})

AimbotGroup:AddSlider('PredictionFactorSlider', {
    Text = 'Prediction Factor',
    Default = Config.PredictionFactor,
    Min = 0.1,
    Max = 2.0,
    Rounding = 1,
    Suffix = '',
    Callback = function(Value)
        Config.PredictionFactor = Value
    end,
})

AimbotGroup:AddToggle('BulletTPToggle', {
    Text = 'Wallbang',
    Default = false,
    Callback = function(Value)
        BulletTPEnabled = Value
        if not BulletTPEnabled then
            if
                LastTeleportedPlayer
                and LastTeleportedPlayer.Character
                and LastTeleportedPlayer.Character:FindFirstChild(
                    'HumanoidRootPart'
                )
            then
                local hitPart = LastTeleportedPlayer.Character:FindFirstChild(
                    Config.HitPart
                ) or LastTeleportedPlayer.Character.HumanoidRootPart
                hitPart.Anchored = false
                hitPart.CanCollide = true
                if LastTeleportedPlayerOriginalPos then
                    hitPart.CFrame = CFrame.new(LastTeleportedPlayerOriginalPos)
                end
                LastPositions[hitPart] = nil
                SetPlayerTransparency(LastTeleportedPlayer, 0)
                RemoveAdornments()
                if Sense and SenseEnabled then
                    Sense.UpdateESPPosition(LastTeleportedPlayer, nil)
                end
                LastTeleportedPlayer = nil
                LastTeleportedPlayerOriginalPos = nil
            end
        end
    end,
})

AimbotGroup:AddToggle('FOVToggle', {
    Text = 'Show FOV Circle',
    Default = false,
    Callback = function(Value)
        FOVEnabled = Value
        if not FOVEnabled and FOVCircle then
            FOVCircle.Visible = false
        end
    end,
})

AimbotGroup:AddSlider('FOVSizeSlider', {
    Text = 'FOV Size',
    Default = Config.FOVRadius,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        Config.FOVRadius = Value
    end,
})

AimbotGroup:AddSlider('SmoothingSlider', {
    Text = 'Smoothing',
    Default = Config.Smoothing,
    Min = 0,
    Max = 20,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        Config.Smoothing = Value
    end,
})

local ESPGroup = Tabs.ESP:AddLeftGroupbox('ESP Controls')

ESPGroup:AddToggle('SenseESPToggle', {
    Text = 'Enable Sense ESP',
    Default = false,
    Callback = function(Value)
        SenseEnabled = Value
        if SenseEnabled then
            local success, result = pcall(function()
                Sense = loadstring(
                    game:HttpGet(
                        'https://raw.githubusercontent.com/helldevelopment/RobloxScripts/main/Support/SenseESP.lua'
                    )
                )()
            end)
            if not success then
                SenseEnabled = false
                Toggles.SenseESPToggle:SetValue(false)
                return
            end

            Sense.teamSettings.enemy.enabled = true
            Sense.teamSettings.enemy.box = true
            Sense.teamSettings.enemy.boxColor[1] = Color3.new(0, 0.25, 0.75)
            Sense.teamSettings.enemy.name = false
            Sense.teamSettings.enemy.distance = false
            Sense.teamSettings.friendly.enabled = Config.TeamCheck and false
                or true
            Sense.teamSettings.enemy.use3D = false

            function Sense.UpdateESPPosition(player, position)
                if self.espCache[player] then
                    self.espCache[player].fixedPosition = position
                end
            end

            local oldUpdate = Sense.Update
            Sense.Update = function(self)
                for player, esp in pairs(self.espCache) do
                    if
                        not player.Character
                        or not player.Character:FindFirstChild(
                            'HumanoidRootPart'
                        )
                    then
                        esp.box.Visible = false
                        if esp.name then
                            esp.name.Visible = false
                        end
                        if esp.distance then
                            esp.distance.Visible = false
                        end
                        self.espCache[player] = nil
                    elseif esp.fixedPosition then
                        local screenPos, onScreen = Camera:WorldToViewportPoint(
                            esp.fixedPosition
                        )
                        if onScreen then
                            esp.box.Position = Vector2.new(
                                screenPos.X,
                                screenPos.Y
                            )
                            esp.box.Visible = true
                            if esp.name then
                                esp.name.Position = Vector2.new(
                                    screenPos.X,
                                    screenPos.Y - 20
                                )
                                esp.name.Visible = self.teamSettings.enemy.name
                            end
                            if esp.distance then
                                esp.distance.Position = Vector2.new(
                                    screenPos.X,
                                    screenPos.Y + 20
                                )
                                esp.distance.Visible =
                                    self.teamSettings.enemy.distance
                            end
                        else
                            esp.box.Visible = false
                            if esp.name then
                                esp.name.Visible = false
                            end
                            if esp.distance then
                                esp.distance.Visible = false
                            end
                        end
                    else
                        local character = player.Character
                        if
                            character
                            and character:FindFirstChild('HumanoidRootPart')
                        then
                            local screenPos, onScreen =
                                Camera:WorldToViewportPoint(
                                    character.HumanoidRootPart.Position
                                )
                            if onScreen then
                                esp.box.Position = Vector2.new(
                                    screenPos.X,
                                    screenPos.Y
                                )
                                esp.box.Visible = true
                                if esp.name then
                                    esp.name.Position = Vector2.new(
                                        screenPos.X,
                                        screenPos.Y - 20
                                    )
                                    esp.name.Visible =
                                        self.teamSettings.enemy.name
                                end
                                if esp.distance then
                                    esp.distance.Position = Vector2.new(
                                        screenPos.X,
                                        screenPos.Y + 20
                                    )
                                    esp.distance.Visible =
                                        self.teamSettings.enemy.distance
                                end
                            else
                                esp.box.Visible = false
                                if esp.name then
                                    esp.name.Visible = false
                                end
                                if esp.distance then
                                    esp.distance.Visible = false
                                end
                            end
                        else
                            esp.box.Visible = false
                            if esp.name then
                                esp.name.Visible = false
                            end
                            if esp.distance then
                                esp.distance.Visible = false
                            end
                        end
                    end
                end
            end

            Sense.Load()
        else
            if Sense then
                Sense.Unload()
            end
        end
    end,
})

ESPGroup:AddToggle('NameESPToggle', {
    Text = 'Name ESP',
    Default = false,
    Callback = function(Value)
        if Sense and SenseEnabled then
            Sense.teamSettings.enemy.name = Value
        end
    end,
})

ESPGroup:AddToggle('DistanceESPToggle', {
    Text = 'Distance ESP',
    Default = false,
    Callback = function(Value)
        if Sense and SenseEnabled then
            Sense.teamSettings.enemy.distance = Value
        end
    end,
})

ESPGroup:AddToggle('ESPTeamCheckToggle', {
    Text = 'Team Check',
    Default = Config.TeamCheck,
    Callback = function(Value)
        Config.TeamCheck = Value
        if Sense and SenseEnabled then
            Sense.teamSettings.friendly.enabled = not Value
        end
    end,
})

local ExploitsGroup = Tabs.Exploits:AddLeftGroupbox('Exploit Controls')

ExploitsGroup:AddToggle('RapidFireToggle', {
    Text = 'Rapid Fire [BUGGY]',
    Default = false,
    Callback = function(Value)
        RapidFireEnabled = Value
    end,
})

ExploitsGroup:AddSlider('RapidFireAmountSlider', {
    Text = 'Rapid Fire Amount',
    Default = Config.RapidFireAmount,
    Min = 100,
    Max = 5000,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        Config.RapidFireAmount = Value
    end,
})

ExploitsGroup:AddToggle('SpinbotToggle', {
    Text = 'Spinbot',
    Default = false,
    Callback = function(Value)
        SpinbotEnabled = Value
    end,
})

ExploitsGroup:AddSlider('SpinbotSpeedSlider', {
    Text = 'Spinbot Speed',
    Default = Config.SpinbotSpeed,
    Min = 10,
    Max = 360,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        Config.SpinbotSpeed = Value
    end,
})

ExploitsGroup:AddToggle('KillAllToggle', {
    Text = 'Kill All',
    Default = false,
    Callback = function(Value)
        KillAllEnabled = Value
        if not KillAllEnabled then
            RestoreEntities()
        end
    end,
})

local MenuGroup = Tabs.Settings:AddLeftGroupbox('Menu')

MenuGroup:AddButton({
    Text = 'Unload',
    Func = function()
        Library:Unload()
    end,
    Tooltip = 'Unloads the script',
})

MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', {
    Default = 'RightShift',
    NoUI = true,
    Text = 'Menu keybind',
})

Library.ToggleKeybind = Options.MenuKeybind

Library:SetWatermarkVisibility(true)
Library:SetWatermark('Big Paintball 2 X | Made by zixy.py2')

Library:OnUnload(function()
    if Sense then
        Sense.Unload()
    end
    if FOVCircle then
        FOVCircle:Remove()
    end
    RestoreEntities()
    Library.Unloaded = true
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' })
ThemeManager:SetFolder('BigPaintball2Aimbot')
SaveManager:SetFolder('BigPaintball2Aimbot')
SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

Library:Notify(
    'Script Loaded',
    'Big Paintball 2 X is ready! Press RightShift to toggle GUI.',
    5
)

RunService.RenderStepped:Connect(function()
    SafeExecute(TeleportPlayerInFOV)
    SafeExecute(UpdateAimbot)
    SafeExecute(UpdateFOVCircle)
    SafeExecute(RemoveAdornments)
    SafeExecute(UpdateSpinbot)
    SafeExecute(UpdateKillAll)
end)
