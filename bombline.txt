if not game:IsLoaded() then 
    game.Loaded:Wait()
end

if not syn or not protectgui then
    getgenv().protectgui = function() end
end

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local ZixyESP = loadstring(game:HttpGet('https://raw.githubusercontent.com/zixypy/zixyx/refs/heads/main/zixyesp.txt'))()
local esp = ZixyESP.new()

ThemeManager:SetFolder('BomblineX')
SaveManager:SetFolder('BomblineX')
ThemeManager:SaveDefault('Tokyo Night')

local Players = game:GetService('Players')
local RunService = game:GetService('RunService')
local Workspace = game:GetService('Workspace')
local UserInputService = game:GetService('UserInputService')
local HttpService = game:GetService('HttpService')

local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local SilentAimSettings = {
    Enabled = false,
    ClassName = "Bombline X",
    ToggleKey = "RightAlt",
    TeamCheck = true,
    VisibleCheck = false,
    TargetPart = "Head",
    SilentAimMethod = "Raycast",
    FOVRadius = 150,
    FOVVisible = false,
    ShowSilentAimTarget = false,
    HitChance = 100,
    BoxColor = Color3.new(0.403922, 0.349020, 0.701961),
    SkeletonColor = Color3.new(0.403922, 0.349020, 0.701961),
    TracerColor = Color3.new(0.403922, 0.349020, 0.701961),
    ChamsColor = Color3.new(1, 0, 0),
    TracerOrigin = "Bottom Screen",
    RagebotEnabled = false,
    IsRagebotShooting = false,
    AimbotEnabled = false,
    AimbotLocking = false,
    AimbotFOVRadius = 100,
    AimbotFOVVisible = false,
    Aimbot360FOV = false,
    AimbotSmoothing = 5,
    TriggerbotEnabled = false,
    IsTriggerbotShooting = false,
    PredictionEnabled = false,
    ProjectileSpeed = 1000,
    AimbotFOVCircle = nil,
    AimbotMode = "Legit",
    WallbangEnabled = false,
    Wallbang360FOV = false,
    OriginalCameraCFrame = nil,
    OriginalPlayerCFrame = nil,
    WallbangedPlayer = nil
}

getgenv().SilentAimSettings = SilentAimSettings
local MainFileName = "BomblineX"
local GetChildren = game.GetChildren
local GetPlayers = Players.GetPlayers
local WorldToScreen = Camera.WorldToScreenPoint
local WorldToViewportPoint = Camera.WorldToViewportPoint
local GetPartsObscuringTarget = Camera.GetPartsObscuringTarget
local FindFirstChild = game.FindFirstChild
local RenderStepped = RunService.RenderStepped
local GetMouseLocation = UserInputService.GetMouseLocation

local resume = coroutine.resume 
local create = coroutine.create
local ValidTargetParts = {"Head", "HumanoidRootPart"}

local ExpectedArguments = {
    Raycast = {
        ArgCountRequired = 3,
        Args = {
            "Instance", "Vector3", "Vector3", "RaycastParams"
        }
    }
}

local fov_circle = Drawing.new("Circle")
fov_circle.Thickness = 1
fov_circle.NumSides = 100
fov_circle.Radius = SilentAimSettings.FOVRadius
fov_circle.Filled = false
fov_circle.Visible = SilentAimSettings.FOVVisible
fov_circle.ZIndex = 999
fov_circle.Transparency = 1
fov_circle.Color = Color3.fromRGB(255, 255, 255)

local mouse_box = Drawing.new("Square")
mouse_box.Visible = SilentAimSettings.ShowSilentAimTarget
mouse_box.ZIndex = 999
mouse_box.Color = Color3.fromRGB(54, 57, 241)
mouse_box.Thickness = 2
mouse_box.Size = Vector2.new(20, 20)
mouse_box.Filled = false

local aimbot_fov_circle = Drawing.new("Circle")
aimbot_fov_circle.Thickness = 1
aimbot_fov_circle.NumSides = 100
aimbot_fov_circle.Radius = SilentAimSettings.AimbotFOVRadius
aimbot_fov_circle.Filled = false
aimbot_fov_circle.Visible = SilentAimSettings.AimbotFOVVisible
aimbot_fov_circle.ZIndex = 998
aimbot_fov_circle.Transparency = 1
aimbot_fov_circle.Color = Color3.fromRGB(255, 255, 255)

esp:Initialize()
esp:TeamCheck(SilentAimSettings.TeamCheck)
esp:SetDistance(500)

do 
    if not isfolder(MainFileName) then 
        makefolder(MainFileName)
    end
    
    if not isfolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId))) then 
        makefolder(string.format("%s/%s", MainFileName, tostring(game.PlaceId)))
    end
end

local Files = listfiles(string.format("%s/%s", "BomblineX", tostring(game.PlaceId)))

local function GetFiles()
    local out = {}
    for i = 1, #Files do
        local file = Files[i]
        if file:sub(-4) == '.lua' then
            local pos = file:find('.lua', 1, true)
            local start = pos
            local char = file:sub(pos, pos)
            while char ~= '/' and char ~= '\\' and char ~= '' do
                pos = pos - 1
                char = file:sub(pos, pos)
            end
            if char == '/' or char == '\\' then
                table.insert(out, file:sub(pos + 1, start - 1))
            end
        end
    end
    return out
end

local function UpdateFile(FileName)
    assert(type(FileName) == "string", "FileName must be a string")
    writefile(string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName), HttpService:JSONEncode(SilentAimSettings))
end

local function LoadFile(FileName)
    assert(type(FileName) == "string", "FileName must be a string")
    local File = string.format("%s/%s/%s.lua", MainFileName, tostring(game.PlaceId), FileName)
    local ConfigData = HttpService:JSONDecode(readfile(File))
    for Index, Value in next, ConfigData do
        SilentAimSettings[Index] = Value
    end
    fov_circle.Radius = SilentAimSettings.FOVRadius
    fov_circle.Visible = SilentAimSettings.FOVVisible
    fov_circle.Color = SilentAimSettings.FOVColor or Color3.fromRGB(54, 57, 241)
    aimbot_fov_circle.Radius = SilentAimSettings.AimbotFOVRadius
    aimbot_fov_circle.Visible = SilentAimSettings.AimbotFOVVisible
    aimbot_fov_circle.Color = SilentAimSettings.AimbotFOVColor or Color3.fromRGB(255, 255, 255)
    mouse_box.Visible = SilentAimSettings.ShowSilentAimTarget
    esp:TeamCheck(SilentAimSettings.TeamCheck)
    esp:SetDistance(325)
    if SilentAimSettings.IsRagebotShooting or SilentAimSettings.IsTriggerbotShooting then
        mouse1release()
        SilentAimSettings.IsRagebotShooting = false
        SilentAimSettings.IsTriggerbotShooting = false
    end
end

local function getPositionOnScreen(Vector)
    local Vec3, OnScreen = WorldToScreen(Camera, Vector)
    return Vector2.new(Vec3.X, Vec3.Y), OnScreen
end

local function getMousePosition()
    return GetMouseLocation(UserInputService)
end

local function IsPlayerVisible(Player)
    if not Player or not Player.Character or not LocalPlayer or not LocalPlayer.Character then
        return false
    end

    local PlayerCharacter = Player.Character
    local LocalCharacter = LocalPlayer.Character

    local PlayerRoot = PlayerCharacter:FindFirstChild(SilentAimSettings.TargetPart) or PlayerCharacter:FindFirstChild("HumanoidRootPart")
    if not PlayerRoot then
        return false
    end

    local CameraPosition = Workspace.CurrentCamera.CFrame.Position
    local TargetPosition = PlayerRoot.Position

    local IgnoreList = {LocalCharacter, PlayerCharacter}

    local success, ObscuringObjects = pcall(function()
        return Workspace.CurrentCamera:GetPartsObscuringTarget({TargetPosition}, IgnoreList)
    end)

    if not success or not ObscuringObjects then
        return false
    end

    return #ObscuringObjects == 0
end


local function Safeguard(func)
    local success, result = pcall(func)
    return success, result
end

local function CalculateChance(Percentage)
    Percentage = math.floor(Percentage)
    local chance = math.floor(Random.new().NextNumber(Random.new(), 0, 1) * 100) / 100
    return chance <= Percentage / 100
end

local function getDirection(Origin, Position)
    return (Position - Origin).Unit * 1000
end

local function predictPosition(target, part)
    if not SilentAimSettings.PredictionEnabled or not target or not target.Parent:FindFirstChild(part) or not target.Parent:FindFirstChild("HumanoidRootPart") then
        return target and target.Position
    end
    local velocity = target.Parent.HumanoidRootPart.Velocity
    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - target.Position).Magnitude
    local travelTime = distance / SilentAimSettings.ProjectileSpeed
    return target.Position + (velocity * travelTime)
end

local function ValidateArguments(Args, RayMethod)
    local Matches = 0
    if #Args < RayMethod.ArgCountRequired then
        return false
    end
    for Pos, Argument in next, Args do
        if typeof(Argument) == RayMethod.Args[Pos] then
            Matches = Matches + 1
        end
    end
    return Matches >= RayMethod.ArgCountRequired
end

local function getClosestPlayer(isAimbot)
    if not SilentAimSettings.TargetPart then return end
    local Closest
    local DistanceToMouse
    local fovRadius = isAimbot and SilentAimSettings.AimbotFOVRadius or SilentAimSettings.FOVRadius
    for _, Player in next, GetPlayers(Players) do
        if Player == LocalPlayer then continue end
        if SilentAimSettings.TeamCheck and Player.Team == LocalPlayer.Team then continue end
        if SilentAimSettings.VisibleCheck and not IsPlayerVisible(Player) then continue end
        local Character = Player.Character
        if not Character then continue end
        local HumanoidRootPart = FindFirstChild(Character, "HumanoidRootPart")
        local Humanoid = FindFirstChild(Character, "Humanoid")
        if not HumanoidRootPart or not Humanoid or Humanoid.Health <= 0 then continue end
        local TargetPart = ((SilentAimSettings.TargetPart == "Random" and Character[ValidTargetParts[math.random(1, #ValidTargetParts)]]) or Character[SilentAimSettings.TargetPart])
        local Position = isAimbot and SilentAimSettings.PredictionEnabled and predictPosition(TargetPart, SilentAimSettings.TargetPart) or TargetPart.Position
        local ScreenPosition, OnScreen = getPositionOnScreen(Position)
        if not OnScreen and not (isAimbot and SilentAimSettings.Aimbot360FOV or not isAimbot and SilentAimSettings.Wallbang360FOV) then continue end
        local Distance = (getMousePosition() - ScreenPosition).Magnitude
        if (isAimbot and SilentAimSettings.Aimbot360FOV) or (not isAimbot and SilentAimSettings.Wallbang360FOV) or Distance <= (DistanceToMouse or fovRadius or 2000) then
            Closest = TargetPart
            DistanceToMouse = Distance
        end
    end
    return Closest
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(...)
    local Method = getnamecallmethod()
    local Arguments = {...}
    local self = Arguments[1]
    local chance = CalculateChance(SilentAimSettings.HitChance)
    if SilentAimSettings.Enabled and self == Workspace and not checkcaller() and chance and Method == "Raycast" then
        if ValidateArguments(Arguments, ExpectedArguments.Raycast) then
            local A_Origin = Arguments[2]
            local HitPart = getClosestPlayer()
            if HitPart then
                local Direction = getDirection(A_Origin, HitPart.Position)
                Arguments[3] = Direction
                return oldNamecall(unpack(Arguments))
            end
        end
    end
    return oldNamecall(...)
end))
local function UpdateRagebot()
    if not SilentAimSettings.RagebotEnabled or not LocalPlayer.Character then
        if SilentAimSettings.IsRagebotShooting then
            mouse1release()
            SilentAimSettings.IsRagebotShooting = false
        end
        return
    end

    local closest = getClosestPlayer()
    if closest and closest.Parent:FindFirstChild(SilentAimSettings.TargetPart) then
        local targetPos, onScreen = getPositionOnScreen(closest.Position)
        local isVisible = IsPlayerVisible(closest.Parent)
        
        if onScreen and isVisible then
            SilentAimSettings.Enabled = true
            if not SilentAimSettings.IsRagebotShooting then
                mouse1press()
                SilentAimSettings.IsRagebotShooting = true
            end
        else
            if SilentAimSettings.IsRagebotShooting then
                mouse1release()
                SilentAimSettings.IsRagebotShooting = false
            end
        end
    else
        if SilentAimSettings.IsRagebotShooting then
            mouse1release()
            SilentAimSettings.IsRagebotShooting = false
        end
    end
end

local function UpdateAimbot()
    if not SilentAimSettings.AimbotEnabled or not SilentAimSettings.AimbotLocking or not LocalPlayer.Character then
        return
    end

    local closest = getClosestPlayer(true)
    if closest and closest.Parent:FindFirstChild("Head") then
        local target_pos = predictPosition(closest, "Head") or closest.Position
        local headPos, onScreen = Camera:WorldToViewportPoint(target_pos)
        if onScreen then
            local mousePos = UserInputService:GetMouseLocation()
            local deltaX = headPos.X - mousePos.X
            local deltaY = headPos.Y - mousePos.Y

            if SilentAimSettings.AimbotMode == "Camlock" or SilentAimSettings.AimbotSmoothing == 0 then
                mousemoverel(deltaX, deltaY)
            else
                local smoothingFactor = math.clamp(1 / (SilentAimSettings.AimbotSmoothing * 2.5), 0.01, 1)
                local moveX = deltaX * smoothingFactor
                local moveY = deltaY * smoothingFactor

                if math.abs(deltaX) < 7.5 and math.abs(deltaY) < 7.5 then
                    moveX = deltaX
                    moveY = deltaY
                end

                mousemoverel(moveX, moveY)
            end
        end
    end
end

local function UpdateTriggerbot()
    if not SilentAimSettings.TriggerbotEnabled or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        if SilentAimSettings.IsTriggerbotShooting then
            mouse1release()
            SilentAimSettings.IsTriggerbotShooting = false
        end
        return
    end

    local closest = getClosestPlayer(false)
    if closest and closest.Parent:FindFirstChild("HumanoidRootPart") and closest.Parent:FindFirstChild(SilentAimSettings.TargetPart) then
        local mousePos = getMousePosition()
        local hitPart = closest
        local isVisible = IsPlayerVisible(closest.Parent)

        local screenPos, onScreen = WorldToViewportPoint(Camera, hitPart.Position)
        local cursorOverHitPart = false
        if onScreen then
            local hitPartSize = hitPart.Size.Magnitude * 10
            local distance = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
            if distance < hitPartSize then
                cursorOverHitPart = true
            end
        end

        if cursorOverHitPart and isVisible then
            if not SilentAimSettings.IsTriggerbotShooting then
                mouse1press()
                SilentAimSettings.IsTriggerbotShooting = true
            end
        else
            if SilentAimSettings.IsTriggerbotShooting then
                mouse1release()
                SilentAimSettings.IsTriggerbotShooting = false
            end
        end
    else
        if SilentAimSettings.IsTriggerbotShooting then
            mouse1release()
            SilentAimSettings.IsTriggerbotShooting = false
        end
    end
end
local function UpdateCameraFreeze()
    if SilentAimSettings.Wallbang360FOV and SilentAimSettings.OriginalCameraCFrame then
        Camera.CFrame = SilentAimSettings.OriginalCameraCFrame
    end
end

local function HandleWallbangTeleport()
    if not SilentAimSettings.WallbangEnabled or not SilentAimSettings.Wallbang360FOV or not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
        return
    end

    local closest = getClosestPlayer(false)
    if closest and closest.Parent:FindFirstChild('HumanoidRootPart') and closest.Parent:FindFirstChild(SilentAimSettings.TargetPart) then
        SilentAimSettings.WallbangedPlayer = Players:GetPlayerFromCharacter(closest.Parent) or closest.Parent
        local targetRoot = closest.Parent.HumanoidRootPart
        local forwardDirection = targetRoot.CFrame.LookVector
        local teleportPos = targetRoot.Position + (forwardDirection * 10)
        
        teleportPos = Vector3.new(teleportPos.X, targetRoot.Position.Y, teleportPos.Z)
        
        local rayOrigin = targetRoot.Position
        local rayDirection = forwardDirection * 10
        local raycastParams = RaycastParams.new()
        raycastParams.FilterDescendantsInstances = {LocalPlayer.Character, closest.Parent}
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        local raycastResult = Workspace:Raycast(rayOrigin, rayDirection, raycastParams)
        
        if raycastResult then
            local hitDistance = (raycastResult.Position - rayOrigin).Magnitude
            if hitDistance < 10 then
                teleportPos = rayOrigin + (forwardDirection * (hitDistance - 1))
                teleportPos = Vector3.new(teleportPos.X, targetRoot.Position.Y, teleportPos.Z)
            end
        end
        
        local targetPos = targetRoot.Position
        local lookDirection = (targetPos - teleportPos).Unit
        local flatLookDirection = Vector3.new(lookDirection.X, 0, lookDirection.Z).Unit
        local newCFrame = CFrame.new(teleportPos) * CFrame.new(Vector3.new(0, 0, 0), flatLookDirection)
        
        LocalPlayer.Character.HumanoidRootPart.CFrame = newCFrame
        
        local humanoid = LocalPlayer.Character:FindFirstChild('Humanoid')
        if humanoid then
            humanoid.AutoRotate = false
        end
        
        UserInputService.MouseBehavior = Enum.MouseBehavior.LockCenter
    else
        SilentAimSettings.WallbangedPlayer = nil
        local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid')
        if humanoid then
            humanoid.AutoRotate = true
        end
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    end
end
local function SafeExecute(func)
    local success, errorMessage = pcall(func)
    if not success then
        warn("Error in SafeExecute: " .. tostring(errorMessage))
    end
end

local function CreateFOVCircle(fovType)
    local circle = Drawing.new("Circle")
    local baseRadius = fovType == "Aimbot" and SilentAimSettings.AimbotFOVRadius or SilentAimSettings.FOVRadius
    circle.Thickness = 2 * (100 / baseRadius)
    circle.Color = fovType == "Aimbot" and Color3.new(1, 1, 1) or Color3.new(1, 1, 1)
    circle.Filled = false
    circle.Transparency = 1
    circle.Visible = fovType == "Aimbot" and SilentAimSettings.AimbotFOVVisible or SilentAimSettings.FOVVisible
    circle.ZIndex = fovType == "Aimbot" and 998 or 999
    circle.Radius = baseRadius
    circle.Position = getMousePosition()
    return circle
end

local function UpdateFOVCircle()
    if not SilentAimSettings.SilentAimFOVCircle then
        SilentAimSettings.SilentAimFOVCircle = CreateFOVCircle("SilentAim")
    end
    if not SilentAimSettings.AimbotFOVCircle then
        SilentAimSettings.AimbotFOVCircle = CreateFOVCircle("Aimbot")
    end
    SilentAimSettings.SilentAimFOVCircle.Position = getMousePosition()
    SilentAimSettings.SilentAimFOVCircle.Radius = SilentAimSettings.FOVRadius
    SilentAimSettings.SilentAimFOVCircle.Thickness = 2 * (100 / SilentAimSettings.FOVRadius)
    SilentAimSettings.SilentAimFOVCircle.Visible = SilentAimSettings.FOVVisible

    SilentAimSettings.AimbotFOVCircle.Position = getMousePosition()
    SilentAimSettings.AimbotFOVCircle.Radius = SilentAimSettings.AimbotFOVRadius
    SilentAimSettings.AimbotFOVCircle.Thickness = 2 * (100 / SilentAimSettings.AimbotFOVRadius)
    SilentAimSettings.AimbotFOVCircle.Visible = SilentAimSettings.AimbotFOVVisible
end

resume(create(function()
    RunService.RenderStepped:Connect(function()
        SafeExecute(UpdateFOVCircle)
        SafeExecute(UpdateRagebot)
        SafeExecute(UpdateAimbot)
        SafeExecute(UpdateTriggerbot)
        SafeExecute(UpdateCameraFreeze) -- Added for camera freeze
        SafeExecute(HandleWallbangTeleport) -- Added for wallbang
        if SilentAimSettings.FOVVisible then
            fov_circle.Position = getMousePosition()
        end
        if SilentAimSettings.AimbotFOVVisible then
            aimbot_fov_circle.Position = getMousePosition()
        end
        if SilentAimSettings.ShowSilentAimTarget and SilentAimSettings.Enabled then
            local HitPart = getClosestPlayer()
            if HitPart then 
                local RootToViewportPoint, IsOnScreen = WorldToViewportPoint(Camera, HitPart.Position)
                mouse_box.Visible = IsOnScreen
                mouse_box.Position = Vector2.new(RootToViewportPoint.X, RootToViewportPoint.Y)
            else 
                mouse_box.Visible = false
                mouse_box.Position = Vector2.new()
            end
        end
    end)
end))

local Window = Library:CreateWindow({
    Title = 'Bombline X | By zixy.py2',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2,
})

local Tabs = {
    Legit = Window:AddTab('Legit'),
    Rage = Window:AddTab('Rage'),
    Visuals = Window:AddTab('Visuals'),
    Player = Window:AddTab('Player'),
    Exploits = Window:AddTab('Exploits'),
    Settings = Window:AddTab('UI Settings'),
}

local LegitGroup = Tabs.Legit:AddLeftGroupbox('Legit Controls')

LegitGroup:AddToggle('AimbotToggle', {
    Text = 'Enable Aimbot',
    Default = false,
    Callback = function(Value)
        SilentAimSettings.AimbotEnabled = Value
        if not Value then
            SilentAimSettings.AimbotLocking = false
        end
    end,
})

LegitGroup:AddToggle('AimbotFOVToggle', {
    Text = 'Show FOV Circle',
    Default = SilentAimSettings.AimbotFOVVisible,
    Callback = function(Value)
        SilentAimSettings.AimbotFOVVisible = Value
        if not Value and SilentAimSettings.AimbotFOVCircle then
            SilentAimSettings.AimbotFOVCircle.Visible = false
        end
    end,
})

LegitGroup:AddToggle('Aimbot360FOVToggle', {
    Text = '360 FOV',
    Default = false,
    Callback = function(Value)
        SilentAimSettings.Aimbot360FOV = Value
        if Value then
            SilentAimSettings.AimbotFOVVisible = false
        end
    end,
})

LegitGroup:AddSlider('AimbotFOVSizeSlider', {
    Text = 'FOV Size',
    Default = SilentAimSettings.AimbotFOVRadius,
    Min = 50,
    Max = 300,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        SilentAimSettings.AimbotFOVRadius = Value
        if SilentAimSettings.AimbotFOVCircle then
            SilentAimSettings.AimbotFOVCircle.Radius = Value
        end
    end,
})
LegitGroup:AddDropdown('AimbotModeDropdown', {
    Text = 'Aimbot Mode',
    Default = 'Legit',
    Values = {'Legit', 'Camlock'},
    Callback = function(Value)
        SilentAimSettings.AimbotMode = Value
        if Value == "Camlock" then
            SilentAimSettings.AimbotSmoothing = 0
            Options.AimbotSmoothingSlider:SetValue(0)
        else

        end
    end,
})
LegitGroup:AddSlider('AimbotSmoothingSlider', {
    Text = 'Smoothing',
    Default = SilentAimSettings.AimbotSmoothing,
    Min = 0,
    Max = 25,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        SilentAimSettings.AimbotSmoothing = Value
    end,
})

LegitGroup:AddToggle('PredictionToggle', {
    Text = 'Enable Prediction',
    Default = SilentAimSettings.PredictionEnabled,
    Callback = function(Value)
        SilentAimSettings.PredictionEnabled = Value
    end,
})

local RageGroup = Tabs.Rage:AddLeftGroupbox('Rage Controls')

RageGroup:AddToggle('SilentAimToggle', {
    Text = 'Enable Silent Aim',
    Default = false,
    Callback = function(Value)
        SilentAimSettings.Enabled = Value
        mouse_box.Visible = Value and SilentAimSettings.ShowSilentAimTarget
    end,
})

RageGroup:AddToggle('FOVVisibleToggle', {
    Text = 'Show FOV Circle',
    Default = SilentAimSettings.FOVVisible,
    Callback = function(Value)
        SilentAimSettings.FOVVisible = Value
        if not Value and SilentAimSettings.SilentAimFOVCircle then
            SilentAimSettings.SilentAimFOVCircle.Visible = false
        end
        fov_circle.Visible = Value
    end,
})

RageGroup:AddSlider('FOVRadiusSlider', {
    Text = 'FOV Size',
    Default = SilentAimSettings.FOVRadius,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        SilentAimSettings.FOVRadius = Value
        fov_circle.Radius = Value
    end,
})

RageGroup:AddSlider('HitChanceSlider', {
    Text = 'Hit Chance',
    Default = SilentAimSettings.HitChance,
    Min = 0,
    Max = 100,
    Rounding = 0,
    Suffix = '%',
    Callback = function(Value)
        SilentAimSettings.HitChance = Value
    end,
})

RageGroup:AddDropdown('TargetPartDropdown', {
    Text = 'Target Part',
    Default = SilentAimSettings.TargetPart,
    Values = {'Head', 'UpperTorso', 'LowerTorso', 'Random'},
    Callback = function(Value)
        SilentAimSettings.TargetPart = Value
    end,
})

RageGroup:AddToggle('WallbangToggle', {
    Text = 'Enable Wallbang/TP [BUGGY]',
    Default = false,
    Callback = function(Value)
        SilentAimSettings.WallbangEnabled = Value
        if not SilentAimSettings.WallbangEnabled then
            SilentAimSettings.Wallbang360FOV = false
            SilentAimSettings.OriginalCameraCFrame = nil
            SilentAimSettings.OriginalPlayerCFrame = nil
            SilentAimSettings.WallbangedPlayer = nil
            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid')
            if humanoid then
                humanoid.AutoRotate = true
            end
        end
    end,
})

RageGroup:AddToggle('TeamCheckToggle', {
    Text = 'Team Check',
    Default = SilentAimSettings.TeamCheck,
    Callback = function(Value)
        SilentAimSettings.TeamCheck = Value
        esp:TeamCheck(Value)
    end,
})

local VisualsGroup = Tabs.Visuals:AddLeftGroupbox('ESP Controls')

VisualsGroup:AddToggle('BoxESPToggle', {
    Text = 'Box ESP',
    Default = false,
    Callback = function(Value)
        if Value then
            esp:InitiateBox(SilentAimSettings.BoxColor)
        else
            esp.State.BoxEnabled = false
        end
    end,
})


VisualsGroup:AddToggle('NameESPToggle', {
    Text = 'Name ESP',
    Default = false,
    Callback = function(Value)
        esp:InitiateName(Value)
    end,
})

VisualsGroup:AddToggle('DistanceESPToggle', {
    Text = 'Distance ESP',
    Default = false,
    Callback = function(Value)
        esp:InitiateDistance(Value)
    end,
})

VisualsGroup:AddToggle('SkeletonESPToggle', {
    Text = 'Skeleton ESP',
    Default = false,
    Callback = function(Value)
        if Value then
            esp:InitiateSkeleton(SilentAimSettings.SkeletonColor)
        else
            esp.State.SkeletonEnabled = false
        end
    end,
})

VisualsGroup:AddToggle('HealthTextESPToggle', {
    Text = 'Health Text ESP',
    Default = false,
    Callback = function(Value)
        esp:InitiateHealthText(Value)
    end,
})

VisualsGroup:AddToggle('HealthBarESPToggle', {
    Text = 'Health Bar ESP',
    Default = false,
    Callback = function(Value)
        esp:InitiateHealthBar(Value)
    end,
})

VisualsGroup:AddToggle('TracerESPToggle', {
    Text = 'Tracer ESP',
    Default = false,
    Callback = function(Value)
        if Value then
            esp:InitiateTracer(SilentAimSettings.TracerColor, SilentAimSettings.TracerOrigin)
        else
            esp.State.TracerEnabled = false
        end
    end,
})

VisualsGroup:AddDropdown('TracerOriginDropdown', {
    Text = 'Tracer Origin',
    Default = SilentAimSettings.TracerOrigin,
    Values = {'Bottom Screen', 'Cursor', 'Top Screen'},
    Callback = function(Value)
        SilentAimSettings.TracerOrigin = Value
        esp.Config.TracerOrigin = Value
    end,
})

VisualsGroup:AddToggle('ChamsToggle', {
    Text = 'Chams',
    Default = false,
    Callback = function(Value)
        if Value then
            esp:InitiateChams(SilentAimSettings.ChamsColor)
        else
            esp.State.ChamsEnabled = false
        end
    end,
})

VisualsGroup:AddLabel('Chams Color'):AddColorPicker('ChamsColorPicker', {
    Default = SilentAimSettings.ChamsColor,
    Callback = function(Value)
        SilentAimSettings.ChamsColor = Value
        esp.Config.ChamsColor = Value
        for _, chams in pairs(esp.Caches.ChamsCache) do
            chams.FillColor = Value
        end
    end,
})


local PlayerGroup = Tabs.Player:AddLeftGroupbox('Player Controls')

local isUpdating = false

local currentWalkSpeed = 16
local currentJumpPower = 50

local function startUpdatingStats()
    if isUpdating then return end
    isUpdating = true

    local frameCount = 0
    RunService.RenderStepped:Connect(function()
        frameCount += 1
        if frameCount >= 10 then
            frameCount = 0
            local character = LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = currentWalkSpeed or 16
                    humanoid.JumpPower = currentJumpPower or 50
                end
            end
        end
    end)
end

PlayerGroup:AddSlider('WalkSpeedSlider', {
    Text = 'Walk Speed',
    Default = 16,
    Min = 16,
    Max = 100,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        currentWalkSpeed = Value
        startUpdatingStats()
    end,
})

PlayerGroup:AddSlider('JumpPowerSlider', {
    Text = 'Jump Power',
    Default = 50,
    Min = 50,
    Max = 200,
    Rounding = 0,
    Suffix = '',
    Callback = function(Value)
        currentJumpPower = Value
        startUpdatingStats()
    end,
})

local ExploitGroup = Tabs.Exploits:AddLeftGroupbox('Soon!')

local SettingsGroup = Tabs.Settings:AddLeftGroupbox('Menu')

SettingsGroup:AddButton({
    Text = 'Unload',
    Func = function()
        esp:Destroy()
        if SilentAimSettings.SilentAimFOVCircle then
            SilentAimSettings.SilentAimFOVCircle:Remove()
        end
        fov_circle:Remove()
        mouse_box:Remove()
        Library:Unload()
    end,
    Tooltip = 'Unloads the script and ESP',
})

SettingsGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', {
    Text = 'Menu keybind:',
    Default = 'RightShift',
    NoUI = true,
})

Library.ToggleKeybind = Options.MenuKeybind
Library:SetWatermarkVisibility(true)
Library:SetWatermark('Bombline X | Made by zixy.py2')

Library:OnUnload(function()
    esp:Destroy()
    if SilentAimSettings.SilentAimFOVCircle then
        SilentAimSettings.SilentAimFOVCircle:Remove()
    end
    if SilentAimSettings.AimbotFOVCircle then
        SilentAimSettings.AimbotFOVCircle:Remove()
    end
    fov_circle:Remove()
    aimbot_fov_circle:Remove()
    mouse_box:Remove()
    if SilentAimSettings.IsRagebotShooting or SilentAimSettings.IsTriggerbotShooting then
        mouse1release()
        SilentAimSettings.IsRagebotShooting = false
        SilentAimSettings.IsTriggerbotShooting = false
    end
    SilentAimSettings.WallbangEnabled = false
    SilentAimSettings.Wallbang360FOV = false
    SilentAimSettings.OriginalCameraCFrame = nil
    SilentAimSettings.OriginalPlayerCFrame = nil
    SilentAimSettings.WallbangedPlayer = nil
    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid')
    if humanoid then
        humanoid.AutoRotate = true
    end
    Library.Unloaded = true
end)

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({ 'MenuKeybind', 'ToggleKeybind' })
SaveManager:BuildConfigSection(Tabs.Settings)
ThemeManager:ApplyToTab(Tabs.Settings)
SaveManager:LoadAutoloadConfig()

Library:Notify(
    'Cheat Loaded',
    'Bombline X is ready! Press RightShift to toggle GUI.',
    5
)

UserInputService.InputBegan:Connect(function(Input, GameProcessed)
    if not GameProcessed then
        if Input.KeyCode == Enum.KeyCode[SilentAimSettings.ToggleKey] then
            SilentAimSettings.Enabled = not SilentAimSettings.Enabled
            mouse_box.Visible = SilentAimSettings.Enabled and SilentAimSettings.ShowSilentAimTarget
        elseif Input.UserInputType == Enum.UserInputType.MouseButton2 and SilentAimSettings.AimbotEnabled then
            SilentAimSettings.AimbotLocking = true
        elseif Input.UserInputType == Enum.UserInputType.MouseButton1 and SilentAimSettings.WallbangEnabled then
            SilentAimSettings.Wallbang360FOV = true
            SilentAimSettings.OriginalCameraCFrame = Camera.CFrame
            if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                SilentAimSettings.OriginalPlayerCFrame = LocalPlayer.Character.HumanoidRootPart.CFrame
            end
            SafeExecute(HandleWallbangTeleport)
        end
    end
end)

UserInputService.InputEnded:Connect(function(Input, GameProcessed)
    if not GameProcessed then
        if Input.UserInputType == Enum.UserInputType.MouseButton2 then
            SilentAimSettings.AimbotLocking = false
        elseif Input.UserInputType == Enum.UserInputType.MouseButton1 and SilentAimSettings.WallbangEnabled then
            SilentAimSettings.Wallbang360FOV = false
            SilentAimSettings.OriginalCameraCFrame = nil
            if SilentAimSettings.OriginalPlayerCFrame and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('HumanoidRootPart') then
                LocalPlayer.Character.HumanoidRootPart.CFrame = SilentAimSettings.OriginalPlayerCFrame
                SilentAimSettings.OriginalPlayerCFrame = nil
            end
            SilentAimSettings.WallbangedPlayer = nil
            UserInputService.MouseBehavior = Enum.MouseBehavior.Default
            local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild('Humanoid')
            if humanoid then
                humanoid.AutoRotate = true
            end
        end
    end
end)
